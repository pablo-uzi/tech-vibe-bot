from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

TOKEN = "PASTE_YOUR_TOKEN_HERE"
OWNER_ID = PASTE_YOUR_NUMERIC_TELEGRAM_ID_HERE

NAME, PHONE, MODEL, PROBLEM, ADDRESS = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Tech Vibe Service.\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è:"
    )
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("üì∫ –ö–∞–∫–∞—è —É –≤–∞—Å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞? (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ)")
    return MODEL

async def get_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["model"] = update.message.text
    await update.message.reply_text("üõ†Ô∏è –í —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞? –û–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ:")
    return PROBLEM

async def get_problem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["problem"] = update.message.text
    await update.message.reply_text("üìç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω –∏–ª–∏ –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ —É–∂–µ –∑–Ω–∞–µ—Ç–µ):")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["address"] = update.message.text

    text = (
        "üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç:*\n\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üì∫ –ú–æ–¥–µ–ª—å: {context.user_data['model']}\n"
        f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {context.user_data['problem']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {context.user_data['address']}"
    )

    await context.bot.send_message(chat_id=OWNER_ID, text=text, parse_mode='Markdown')
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_model)],
            PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_problem)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
